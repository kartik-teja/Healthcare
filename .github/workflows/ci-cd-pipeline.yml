name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build backend Docker image
        run: docker build -t myapp-backend:latest ./backend

      - name: Build frontend Docker image
        run: docker build -t myapp-frontend:latest ./frontend
      
      - name: Tag backend Docker image
        run: docker tag myapp-backend:latest "${{ secrets.DOCKER_USERNAME }}"/healthcare-backend:latest

      - name: Tag frontend Docker image
        run: docker tag myapp-frontend:latest "${{ secrets.DOCKER_USERNAME }}"/healthcare-frontend:latest
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push backend Docker image
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/healthcare-backend:latest

      - name: Push frontend Docker image
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/healthcare-frontend:latest

      - name: Deploy to server
        run: |
          ssh user@yourserver.com <<EOF
          docker pull myapp-backend:latest
          docker pull myapp-frontend:latest
          docker-compose -f docker-compose.yml up -d
          EOF

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: '#deployments'
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_MESSAGE: 'Deployment ${{ job.status }} for commit ${{ github.sha }}'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: database_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ./backend
        run: npm install

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h 127.0.0.1 -p 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: Run tests
        working-directory: ./backend
        run: npm test

env:
  DB_NAME: database_test
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_HOST: 127.0.0.1
